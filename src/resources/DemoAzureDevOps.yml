# Basic Azure DevOps pipeline to invoke the automation using Azure DevOps pipeline.
trigger: none

pool: Default

# Create a library with `rhino.api` that holds `RhinoUsername` & RhinoPassword parameters.
# How to create Azure DevOps library: https://learn.microsoft.com/en-us/azure/devops/pipelines/library/?view=azure-devops
variables:
- group: rhino.api

parameters:
#
# Environment
- name: 'EnvironmentUnderTest'
  default: ' '
  displayName: 'Environment Under Test'
  type: 'string'
#
# Rhino Setup
- name: 'RhinoEndpoint'
  default: 'http://localhost:9000'
  displayName: 'Rhino Server Address'
  type: 'string'
  values:
      - 'http://localhost:9900'
      - 'http://localhost:9000'

- name: 'RhinoUsername'
  default: '$(RhinoUsername)'
  displayName: 'Rhino API Username'
  type: 'string'

- name: 'RhinoPassword'
  default: '$(RhinoPassword)'
  displayName: 'Rhino API Password'
  type: 'string'

- name: 'Filter'
  default: "Category LIKE ''*''"
  displayName: 'Tests Selection Query'
  type: 'string'

- name: 'LoadTimeout'
  default: 60000
  displayName: 'The Amount of Time to Wait (in milliseconds) for a Page to Load Before Throwing a Timeout Exception'
  type: 'number'

- name: 'SearchTimeout'
  default: 15000
  displayName: 'The Amount of Time to Wait (in milliseconds) for an Element to be Found Before Throwing a Timeout Exception'
  type: 'number'

- name: 'DriverBinaries'
  default: '.'
  displayName: 'Web Driver Binaries Location or Hub Address'
  type: 'string'
  values:
      - 'http://selenoid:4444/wd/hub'
      - '.'

- name: 'Driver'
  default: 'MockWebDriver'
  displayName: 'Web Driver Type'
  type: 'string'
  values:
      - 'ChromeDriver'
      - 'FirefoxDriver'
      - 'MicrosoftWebDriver'
      - 'MockWebDriver'

stages:
  - stage: InvokeAutomation
    jobs:
      - job: "InvokeAutomationScript"
        displayName: "Invoke Automation Script"
        steps:
          - task: PowerShell@2
            displayName: "Invoke Tests `${{ parameters.Filter }}`"
            inputs:
              targetType: 'inline'
              script: |
                #
                # SETUP
                $basePath   = [System.IO.Directory]::GetParent($PSCommandPath)
                $scriptPath = [System.IO.Path]::Combine("$(Build.SourcesDirectory)", 'scripts')
                Write-Host $(Build.ArtifactStagingDirectory)
                Set-Location -Path $scriptPath
                #
                # INVOCATION
                Invoke-Expression -Command ".\InvokeConfiguration.ps1 ``
                    -ProjectRoot '$(Build.SourcesDirectory)' ``
                    -ReportOut '$(Build.ArtifactStagingDirectory)' ``
                    -Endpoint '${{ parameters.RhinoEndpoint }}' ``
                    -RhinoUsername '${{ parameters.RhinoUsername }}' ``
                    -RhinoSecret '${{ parameters.RhinoPassword }}' ``
                    -DriverBinaries '${{ parameters.DriverBinaries }}' ``
                    -Filter '${{ parameters.Filter }}' ``
                    -Environment '${{ parameters.EnvironmentUnderTest }}' ``
                    -Driver '${{ parameters.Driver }}' ``
                    -SearchTimeout ${{ parameters.SearchTimeout }} ``
                    -LoadTimeout ${{ parameters.LoadTimeout }}"
              failOnStderr: true
              pwsh: true
 
          - task: PublishBuildArtifacts@1
            displayName: "Publish JUnit Report `$(Build.ArtifactStagingDirectory)/junit.xml`"
            condition: succeededOrFailed()
            inputs:
              PathToPublish: '$(Build.ArtifactStagingDirectory)'
              ArtifactName: 'junit'
              publishLocation: 'Container'
  
  - stage: PublishResults
    condition: succeededOrFailed()
    displayName: Publish Results
    jobs:
      - job: "PublishJunitReport"
        displayName: "Publish JUnit Report"
        steps:
          - checkout: none

          - task: DownloadBuildArtifacts@1
            displayName: "Download JUnit Report"
            inputs:
              buildType: 'current'
              downloadType: 'single'
              itemPattern: '**/junit.xml'
              downloadPath: '$(System.ArtifactsDirectory)'

          - task: PublishTestResults@2
            displayName: "Publish JUnit Report as Test Results"
            inputs:
              testResultsFormat: 'JUnit'
              testResultsFiles: '**/junit.xml'
              searchFolder: '$(System.ArtifactsDirectory)'
              mergeTestResults: true
